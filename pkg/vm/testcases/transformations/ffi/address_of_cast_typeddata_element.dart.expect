library #lib;
import self as self;
import "dart:typed_data" as typ;
import "dart:core" as core;
import "dart:ffi" as ffi;

import "dart:ffi";
import "dart:typed_data";

static method main() → void {
  final typ::Int8List typedData = typ::Int8List::•(20);
  self::myNative#T(typedData);
}
@#C6
@#C8
external static method myNative(ffi::Pointer<ffi::Void> pointer) → core::int;
@#C6
@#C8
external static method myNative#T(typ::TypedData pointer) → core::int;
constants  {
  #C1 = "cfe:ffi:native-marker"
  #C2 = "myNative"
  #C3 = "#lib"
  #C4 = true
  #C5 = ffi::Native<(ffi::Pointer<ffi::Void>) → ffi::Int8> {symbol:#C2, assetId:#C3, isLeaf:#C4}
  #C6 = core::pragma {name:#C1, options:#C5}
  #C7 = "vm:ffi:native"
  #C8 = core::pragma {name:#C7, options:#C5}
}
